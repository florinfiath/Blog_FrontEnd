{"ast":null,"code":"// import React, { useRef, useState } from 'react';\n// import { Link, useHistory} from 'react-router-dom';\n// import ReactQuill from \"react-quill\";\n// import \"../css/style.css\";\n// const axios = require('axios').default;\n// const AddPost = (props) => {\n//    const [title, setTitle] = useState(\"\");\n//    const [errors, setErrors] = useState(\"\");\n//    const titleRef = useRef();\n//    const contentRef = useRef();\n//    let history = useHistory();\n// const handleBody = (e) => {\n//   console.log(e);\n//   contentRef.current.value = e;\n// };\n// const setPost = async (postTitle, postContent) => {\n//   try{\n//     const response = await axios\n//     .post(\"http://localhost:3001/post/\",{\n//       title: postTitle,\n//       content: postContent\n//     })\n//      await props.sendGetRequest({title});\n//       console.log(\"response is :\" + JSON.stringify(response));\n// } catch(error) {\n//   console.log(error);\n//   throw(error);\n// }\n// };\n// const setPostOnClick = async () => {\n//   try{\n//     await setPost(\n//     titleRef.current.value,\n//     contentRef.current.value\n//   );\n//   setTitle(\"\");\n//   props.sendGetRequest();\n//   //history.push('./showPosts')\n//   }catch(error) {\n//     console.log(error.response.data);\n//     setErrors(error.response.data);\n//   }\n// };\n//     return (\n//       <div className=\"blog-form\">\n//         <div className=\"blog-form\">\n//           {errors && (\n//             <div className=\"errors\">\n//               <h1>There are some errors below:</h1> <br />\n//               {/* <pre> {JSON.stringify(errors, null, 2)}</pre> */}\n//               <ul>\n//                 {errors[\"errors\"]\n//                   .map((error) => Object.entries(error))\n//                   .map((element) => (\n//                     <li>\n//                       {element[0][0]} - {element[0][1]}\n//                     </li>\n//                   ))}\n//               </ul>\n//             </div>\n//           )}\n//         </div>\n//         {/* {errors\n//           ? errors\n//               .map((error) => Object.entries(error))\n//               .map((element) => (\n//                 <li key={Math.random()}>\n//                   {element[0][0]} - {element[0][1]}\n//                 </li>\n//               ))\n//           : console.log(\"no error\")} */}\n//         <form method=\"post\">\n//           <div class=\"form-group\">\n//             <h3>Add a New Post</h3>\n//             <p>Title:</p>\n//             <input\n//               type=\"text\"\n//               class=\"form-control\"\n//               id=\"addTitlePost\"\n//               placeholder=\"Enter post title\"\n//               ref={titleRef}\n//             />\n//           </div>\n//           <div class=\"form-group\">\n//             <p>Content:</p>\n//             <ReactQuill\n//               className=\"border border-dark\"\n//               placeholder=\"write something amazing...\"\n//               modules={AddPost.modules}\n//               formats={AddPost.formats}\n//               onChange={handleBody}\n//               ref={contentRef}\n//               id=\"inputContent\"\n//             />\n//           </div>\n//           <Link to=\"/\">\n//             <button\n//               onClick={() => {\n//                 setPostOnClick();\n//                 ;\n//               }}\n//               className=\"btn btn-primary mt-5\">\n//               Save\n//             </button>\n//           </Link>\n//         </form>\n//       </div>\n//     );\n// };\n// AddPost.modules = {\n//   toolbar: [\n//     [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n//     [{ size: [] }],\n//     [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n//     [\n//       { list: \"ordered\" },\n//       { list: \"bullet\" },\n//       { indent: \"-1\" },\n//       { indent: \"+1\" },\n//     ],\n//     [\"link\", \"image\", \"video\"],\n//     [\"clean\"],\n//   ],\n// };\n// /*\n//  * Quill editor formats\n//  * See https://quilljs.com/docs/formats/\n//  */\n// AddPost.formats = [\n//   \"header\",\n//   \"font\",\n//   \"size\",\n//   \"bold\",\n//   \"italic\",\n//   \"underline\",\n//   \"strike\",\n//   \"blockquote\",\n//   \"list\",\n//   \"bullet\",\n//   \"indent\",\n//   \"link\",\n//   \"image\",\n//   \"video\",\n// ];\n// export default AddPost;","map":{"version":3,"sources":["/home/dci/Desktop/Workspace/NoName-People/Backend/BackEndProjects/Blog/Frontend/blog/src/components/addPost.js"],"names":[],"mappingssourcesContent":["// import React, { useRef, useState } from 'react';\n// import { Link, useHistory} from 'react-router-dom';\n// import ReactQuill from \"react-quill\";\n// import \"../css/style.css\";\n// const axios = require('axios').default;\n\n\n\n// const AddPost = (props) => {\n\n//    const [title, setTitle] = useState(\"\");\n//    const [errors, setErrors] = useState(\"\");\n\n//    const titleRef = useRef();\n//    const contentRef = useRef();\n//    let history = useHistory();\n\n// const handleBody = (e) => {\n//   console.log(e);\n//   contentRef.current.value = e;\n// };\n\n// const setPost = async (postTitle, postContent) => {\n//   try{\n//     const response = await axios\n//     .post(\"http://localhost:3001/post/\",{\n//       title: postTitle,\n//       content: postContent\n//     })\n//      await props.sendGetRequest({title});\n//       console.log(\"response is :\" + JSON.stringify(response));\n     \n// } catch(error) {\n//   console.log(error);\n//   throw(error);\n// }\n// };\n\n// const setPostOnClick = async () => {\n\n//   try{\n//     await setPost(\n//     titleRef.current.value,\n//     contentRef.current.value\n//   );\n//   setTitle(\"\");\n//   props.sendGetRequest();\n//   //history.push('./showPosts')\n//   }catch(error) {\n//     console.log(error.response.data);\n//     setErrors(error.response.data);\n//   }\n// };\n\n//     return (\n//       <div className=\"blog-form\">\n//         <div className=\"blog-form\">\n//           {errors && (\n//             <div className=\"errors\">\n//               <h1>There are some errors below:</h1> <br />\n//               {/* <pre> {JSON.stringify(errors, null, 2)}</pre> */}\n//               <ul>\n//                 {errors[\"errors\"]\n//                   .map((error) => Object.entries(error))\n//                   .map((element) => (\n//                     <li>\n//                       {element[0][0]} - {element[0][1]}\n//                     </li>\n//                   ))}\n//               </ul>\n//             </div>\n//           )}\n//         </div>\n//         {/* {errors\n//           ? errors\n//               .map((error) => Object.entries(error))\n//               .map((element) => (\n//                 <li key={Math.random()}>\n//                   {element[0][0]} - {element[0][1]}\n//                 </li>\n//               ))\n//           : console.log(\"no error\")} */}\n\n//         <form method=\"post\">\n//           <div class=\"form-group\">\n//             <h3>Add a New Post</h3>\n//             <p>Title:</p>\n//             <input\n//               type=\"text\"\n//               class=\"form-control\"\n//               id=\"addTitlePost\"\n//               placeholder=\"Enter post title\"\n//               ref={titleRef}\n//             />\n//           </div>\n//           <div class=\"form-group\">\n//             <p>Content:</p>\n//             <ReactQuill\n//               className=\"border border-dark\"\n//               placeholder=\"write something amazing...\"\n//               modules={AddPost.modules}\n//               formats={AddPost.formats}\n//               onChange={handleBody}\n//               ref={contentRef}\n//               id=\"inputContent\"\n//             />\n//           </div>\n//           <Link to=\"/\">\n//             <button\n//               onClick={() => {\n//                 setPostOnClick();\n//                 ;\n//               }}\n//               className=\"btn btn-primary mt-5\">\n//               Save\n//             </button>\n//           </Link>\n//         </form>\n//       </div>\n//     );\n// };\n\n// AddPost.modules = {\n//   toolbar: [\n//     [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n//     [{ size: [] }],\n//     [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n//     [\n//       { list: \"ordered\" },\n//       { list: \"bullet\" },\n//       { indent: \"-1\" },\n//       { indent: \"+1\" },\n//     ],\n//     [\"link\", \"image\", \"video\"],\n//     [\"clean\"],\n//   ],\n// };\n// /*\n//  * Quill editor formats\n//  * See https://quilljs.com/docs/formats/\n//  */\n// AddPost.formats = [\n//   \"header\",\n//   \"font\",\n//   \"size\",\n//   \"bold\",\n//   \"italic\",\n//   \"underline\",\n//   \"strike\",\n//   \"blockquote\",\n//   \"list\",\n//   \"bullet\",\n//   \"indent\",\n//   \"link\",\n//   \"image\",\n//   \"video\",\n// ];\n\n// export default AddPost;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}